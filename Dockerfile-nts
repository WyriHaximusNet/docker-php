FROM php:7.3-cli-alpine3.10 AS build-uv
RUN apk update && \
    apk add --no-cache $PHPIZE_DEPS git libuv-dev && \
    git clone https://github.com/bwoebi/php-uv uv
WORKDIR /uv
RUN git fetch \
    && git pull \
    && phpize \
    && ./configure \
    && make install \
    && EXTENSION_DIR=`php-config --extension-dir 2>/dev/null` && \
    cp "$EXTENSION_DIR/uv.so" /uv.so
RUN sha256sum /uv.so

## Build ext-meminfo
FROM php:7.3-cli-alpine AS build-meminfo
RUN apk update && \
    apk add --no-cache $PHPIZE_DEPS git libuv-dev && \
    git clone https://github.com/BitOne/php-meminfo.git
WORKDIR /php-meminfo/extension/php7
RUN phpize
RUN ./configure --enable-meminfo
RUN make install
RUN EXTENSION_DIR=`php-config --extension-dir 2>/dev/null` && \
    cp "$EXTENSION_DIR/meminfo.so" /meminfo.so
RUN sha256sum /meminfo.so

FROM php:7.3-alpine AS nts-root

RUN set -x \
    && addgroup -g 1000 app \
    && adduser -u 1000 -D -G app app
COPY --from=build-uv /uv.so /uv.so

# Patch CVE-2018-14618 (curl), CVE-2018-16842 (libxml2), CVE-2019-1543 (openssl)
RUN apk upgrade --no-cache curl libxml2 openssl

# Install docker help scripts
COPY src/php/utils/docker/ /usr/local/bin/

COPY src/php/conf/ /usr/local/etc/php/conf.d/
COPY src/php/cli/conf/*.ini /usr/local/etc/php/conf.d/

RUN EXTENSION_DIR=`php-config --extension-dir 2>/dev/null` && \
	mv /*.so "$EXTENSION_DIR/" && \
	apk update && \
	apk add --no-cache \
        freetype-dev \
        libjpeg-turbo-dev \
        libpng-dev \
        gmp-dev \
        zlib-dev \
        postgresql-dev \
        libzip-dev \
        libuv-dev \
        coreutils \
        procps \
        vips-dev \
        git \
        $PHPIZE_DEPS \
    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
    && docker-php-ext-install -j$(nproc) gd pcntl pgsql pdo pdo_pgsql bcmath zip gmp iconv \
    && pecl install vips \
    && docker-php-ext-enable uv \
    && docker-php-ext-enable vips \
    && apk del $PHPIZE_DEPS \
    && wget -O - https://raw.githubusercontent.com/eficode/wait-for/master/wait-for > /bin/wait-for \
    && chmod +x /bin/wait-for \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/* \
    && rm -rf /usr/lib/python*

# Install shush
COPY src/php/utils/install-shush /usr/local/bin/
RUN install-shush && rm -rf /usr/local/bin/install-shush

STOPSIGNAL SIGTERM

ENTRYPOINT ["/usr/local/bin/shush", "exec", "docker-php-entrypoint"]

## NTS-DEV STAGE ##
FROM nts-root AS nts-dev-root

# Install docker help scripts
COPY src/php/utils/docker/ /usr/local/bin/

RUN true
# Copy in meminfo extension
COPY --from=build-meminfo /meminfo.so /meminfo.so
RUN true

RUN EXTENSION_DIR=`php-config --extension-dir 2>/dev/null` \
    && mv /*.so "$EXTENSION_DIR/" \
    && docker-php-ext-enable meminfo \
    && apk add --no-cache \
        make \
        git \
        openssh-client \
        bash \
        strace \
# Install Xdebug and development specific configuration
    && docker-php-dev-mode xdebug \
    && docker-php-dev-mode config \
# Forcefully clear API cache
    && rm -rf /var/cache/apk/*

# Install composer
COPY src/php/utils/install-composer /usr/local/bin/
RUN install-composer \
    && rm -rf /usr/local/bin/install-composer \
    && composer global require hirak/prestissimo --ansi --no-progress \
    && composer clear-cache

# Change entrypoint back to the default because we don't need shush in development
ENTRYPOINT ["docker-php-entrypoint"]

## NTS-DEV stage ##
FROM nts-dev-root AS nts-dev

USER app

RUN composer global require hirak/prestissimo --ansi --no-progress \
    && composer clear-cache

## NTS stage ##
FROM nts-root AS nts

USER app
