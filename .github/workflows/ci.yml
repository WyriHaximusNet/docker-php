name: Continuous Integration
env:
  DOCKER_IMAGE: wyrihaximusnet/php
  DOCKER_BUILDKIT: 1
on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron:  '33 */4 * * *'
jobs:
  supported-alpine-versions:
    name: Supported Alpine versions
    runs-on: ubuntu-latest
    container:
      image: wyrihaximusnet/php:7.4-nts-alpine3.12-root
    outputs:
      alpine: ${{ steps.supported-alpine-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v1
      - id: supported-alpine-versions
        name: Generate Alpine
        uses: wyrihaximus/github-action-supported-alpine-linux-versions@v1
  supported-php-versions:
    name: Supported PHP versions
    runs-on: ubuntu-latest
    outputs:
      php: ${{ steps.supported-php-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v1
      - id: supported-php-versions
        name: Generate PHP
        uses: wyrihaximus/github-action-supported-php-versions@v1
  image-type-matrix:
    name: Create Image Type Matrix
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.image-type-matrix.outputs.type }}
    steps:
      - uses: actions/checkout@v1
      - id: image-type-matrix
        name: Generate Type
        run: |
          ls Dockerfile-* | jq -csR '. | rtrimstr("\n") | split("\n")' | php -r "echo str_replace('Dockerfile-', '', stream_get_contents(STDIN));" > types.list
          cat types.list
          echo "::set-output name=type::$(cat types.list)"
  image-matrix:
    name: Create Image Matrix
    runs-on: ubuntu-latest
    needs:
      - supported-alpine-versions
      - supported-php-versions
    outputs:
      image: ${{ steps.image-matrix.outputs.image }}
    steps:
      - uses: actions/checkout@v1
      - id: image-matrix
        name: Generate Combined Image Matrix
        run: |
          if [ "${{ github.event_name }}" == "schedule" ] ; then
            php utils/newer-upstream-images.php
            exit 0
          fi

          php utils/all-images.php
        env:
          ALPINE: ${{ needs.supported-alpine-versions.outputs.alpine }}
          PHP: ${{ needs.supported-php-versions.outputs.php }}
  lint:
    name: Linting Dockerfile-${{ matrix.type }}
    runs-on: ubuntu-latest
    needs:
      - image-type-matrix
    strategy:
      fail-fast: false
      matrix:
        type: ${{ fromJson(needs.image-type-matrix.outputs.type) }}
    steps:
      - uses: actions/checkout@v2
      - name: Lint Dockerfile-${{ matrix.type }}
        uses: docker://hadolint/hadolint:latest-debian
        with:
          entrypoint: hadolint
          args: Dockerfile-${{ matrix.type }}
  build:
    name: Building "${{ matrix.image }}"
    needs:
      - lint
      - image-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.image-matrix.outputs.image) }}
    steps:
      - uses: actions/checkout@v2
      - run: mkdir ./docker-image/
      - run: ./build-php.sh $(echo "${{ matrix.image }}" | tr '-' ' ')
      - run: cat ./docker-image/image.tags | xargs -I % docker inspect --format='%={{.Id}}:{{index .Config.Env 7}}' %
      - run: docker save "${DOCKER_IMAGE}" | gzip -9 > ./docker-image/image.tar
      - run: docker images
      - name: Upload Images (attempt #1)
        uses: actions/upload-artifact@v2
        with:
          name: docker-image-${{ matrix.image }}
          path: ./docker-image
      - name: Upload Images (attempt #2)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: docker-image-${{ matrix.image }}
          path: ./docker-image
      - name: Upload Images (attempt #3)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: docker-image-${{ matrix.image }}
          path: ./docker-image
  scan-vulnerability:
    name: Scanning "${{ matrix.image }}" for vulnerabilities
    needs:
      - build
      - image-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.image-matrix.outputs.image) }}
    steps:
      - uses: actions/checkout@v2
      - name: Install clair-scanner
        run: |
          sudo curl -L https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64 -o /usr/local/bin/clair-scanner
          sudo chmod +x /usr/local/bin/clair-scanner
      - name: Download Images
        uses: actions/download-artifact@v2
        with:
          name: docker-image-${{ matrix.image }}
          path: ./docker-image
      - run: docker load --input ./docker-image/image.tar
      - run: mkdir -p "./clair/${DOCKER_IMAGE}"
      - run: make ci-scan-vulnerability
  test:
    name: Testing "${{ matrix.image }}"
    needs:
      - build
      - image-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.image-matrix.outputs.image) }}
    steps:
      - uses: actions/checkout@v2
      - name: Download Images
        uses: actions/download-artifact@v2
        with:
          name: docker-image-${{ matrix.image }}
          path: ./docker-image
      - run: ls -lasth ./docker-image
      - run: docker load --input ./docker-image/image.tar
      - run: make $(php -r 'echo "test-", explode("-", str_replace(["zts-zts", "cli-nts"], ["zts", "nts"], "${{ matrix.image }}"))[0];')
      - run: rm -Rf ./docker-image/
  push-docker-hub:
    name: Pushing "${{ matrix.image }}" to Docker Hub
    if: (github.event_name == 'push' || github.event_name == 'schedule') && github.ref == 'refs/heads/master'
    needs:
      - scan-vulnerability
      - test
      - image-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.image-matrix.outputs.image) }}
    steps:
      - uses: actions/checkout@v2
      - name: Download Images
        uses: actions/download-artifact@v2
        with:
          name: docker-image-${{ matrix.image }}
          path: ./docker-image
      - run: docker load --input ./docker-image/image.tar
      - run: make ci-push
        env:
          DOCKER_USER: ${{ secrets.HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.HUB_PASSCODE }}
          DOCKER_REGISTRY: docker.io
  push-github-container-registry:
    name: Pushing "${{ matrix.image }}" to GitHub Container Registry
    if: (github.event_name == 'push' || github.event_name == 'schedule') && github.ref == 'refs/heads/master'
    needs:
      - scan-vulnerability
      - test
      - image-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.image-matrix.outputs.image) }}
    steps:
      - uses: actions/checkout@v2
      - name: Download Images
        uses: actions/download-artifact@v2
        with:
          name: docker-image-${{ matrix.image }}
          path: ./docker-image
      - run: docker load --input ./docker-image/image.tar
      - run: make ci-push
        env:
          DOCKER_USER: ${{ secrets.HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.GHCR_TOKEN }}
          DOCKER_REGISTRY: ghcr.io
