name: Continuous Integration
env:
  DOCKER_IMAGE: wyrihaximusnet/php
  DOCKER_BUILDKIT: 1
  DOCKER_IMAGE_REGISTRIES_SECRET_MAPPING: '{"ghcr.io":"GHCR_TOKEN","docker.io":"HUB_PASSCODE"}'
  DOCKER_CLI_EXPERIMENTAL: enabled

on:
  workflow_call:
    inputs:
      alpine:
        description: JSON string with Alpine versions to build
        required: true
        type: string
      debian:
        description: JSON string with Debian versions to build
        required: true
        type: string

jobs:
  supported-php-versions:
    name: Supported PHP versions
    runs-on: ubuntu-latest
    outputs:
      php: ${{ steps.supported-php-versions.outputs.versions }}
    steps:
      - id: supported-php-versions
        name: Generate PHP
        uses: wyrihaximus/github-action-supported-php-versions@v1
        with:
          upcomingReleases: true
  supported-platform-matrix:
    name: Supported platforms
    runs-on: ubuntu-latest
    outputs:
      platform: ${{ steps.supported-platform-matrix.outputs.platform }}
    steps:
      - id: supported-platform-matrix
        name: Generate Platform list
        run: |
          echo "platform=[\"linux/amd64\",\"linux/arm64\"]" >> $GITHUB_OUTPUT
  image-type-matrix:
    name: Create Image Type Matrix
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.image-type-matrix.outputs.type }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - id: image-type-matrix
        name: Generate Type
        run: |
          ls Dockerfile-* | jq -csR '. | rtrimstr("\n") | split("\n")' | php -r "echo str_replace('Dockerfile-', '', stream_get_contents(STDIN));" > types.list
          cat types.list
          echo "type=$(cat types.list)" >> $GITHUB_OUTPUT
  image-matrix:
    name: Create Image Matrix
    runs-on: ubuntu-latest
    needs:
      - lint
      - supported-php-versions
    outputs:
      image: ${{ steps.image-matrix.outputs.image }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - run: mkdir /tmp/trivy
      - name: Cache Trivy Cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: /tmp/trivy
          key: cache-trivy-${{ runner.environment }}-${{ runner.arch }}-${{ runner.os }}
          restore-keys: cache-trivy-
      - id: image-matrix
        name: Generate Combined Image Matrix
        run: |
          echo "Generate full image list"
          php utils/all-images.php

          if [ "${{ github.event_name }}" == "schedule" ] ; then
            echo "This is a scheduled run, scanning for CVE's"
            touch trivy.output
            php utils/all-image-tags.php | grep -v debian  | xargs -I % sh -c 'docker pull -q $(php -r "echo explode(\"#\", \"%\")[0];") && echo "%|" || true' >> pullable.list
            cat pullable.list | xargs -I % sh -c 'docker run -v /tmp/trivy:/var/lib/trivy -v /var/run/docker.sock:/var/run/docker.sock -t aquasec/trivy:latest --cache-dir /var/lib/trivy image --exit-code 1 --no-progress $(php -r "echo explode(\"#\", \"%\")[0];") >> trivy.output || echo "%|"' >> images_with.cves
            cat trivy.output
  
            if [ -s "images_with.cves" ]
            then
              echo "Found images with CVE's in them"
              cat images_with.cves | xargs -I % php -r 'echo implode(PHP_EOL, explode("|", "%")), PHP_EOL;' | xargs -I % php -r 'echo explode("#", "%")[1], PHP_EOL;' >> images-that-need-updating.list
            fi
  
            echo "Looking for newer upstream images"
            php utils/newer-upstream-images.php  >> images-that-need-updating.list
          
            echo "Building the following images:"
            php utils/deduplicate-list.php | jq '.[]'
  
            printf "image=%s" $(php utils/deduplicate-list.php) >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Not in a scheduled run, building all images"
          
          echo "Building the following images:"
          cat all-images.list | jq '.[]'
          
          printf "image=%s" $(cat all-images.list) >> $GITHUB_OUTPUT
          exit 0
        env:
          ALPINE: ${{ inputs.alpine }}
          DEBIAN: ${{ inputs.debian }}
          PHP: ${{ needs.supported-php-versions.outputs.php }}
  lint:
    name: Linting Dockerfile-${{ matrix.type }}
    runs-on: ubuntu-latest
    needs:
      - image-type-matrix
    strategy:
      fail-fast: false
      matrix:
        type: ${{ fromJson(needs.image-type-matrix.outputs.type) }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - name: Lint Dockerfile-${{ matrix.type }}
        uses: docker://hadolint/hadolint:latest-debian
        with:
          entrypoint: hadolint
          args: Dockerfile-${{ matrix.type }}
  build:
    name: Building "${{ matrix.image }}" on ${{ matrix.platform }}
    needs:
      - lint
      - image-matrix
      - supported-platform-matrix
    runs-on: ${{ contains(matrix.platform, 'arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.image-matrix.outputs.image) }}
        platform: ${{ fromJson(needs.supported-platform-matrix.outputs.platform) }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          printf "PLATFORM_ARCH=%s" $(echo "${{ matrix.platform }}" | cut -d "/" -f 2) >> $GITHUB_ENV
      - name: Runner Arch
        run: echo "${{ runner.arch }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        if: ${{ !contains(matrix.platform, 'arm') && !contains(matrix.platform, 'amd64') }}
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - run: mkdir ./docker-image/
      - uses: nick-invision/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          timeout_minutes: 120
          retry_wait_seconds: 30
          max_attempts: 5
          command: ./build-php.sh $(echo "${{ matrix.image }}" | tr '-' ' ') $(echo "${{ matrix.platform }}" | cut -d "/" -f 2)
      - run: mv ./docker-image/image.tags ./docker-image/image-${{ matrix.image }}-${{ env.PLATFORM_PAIR }}.tags
      - run: cat ./docker-image/image-${{ matrix.image }}-${{ env.PLATFORM_PAIR }}.tags | xargs -I % docker inspect --format='%={{.Id}}:{{index .Config.Env 7}}' %
      - run: docker save "${DOCKER_IMAGE}" -o ./docker-image/docker_image-${{ env.PLATFORM_PAIR }}.tar
      - run: docker images
      - name: Upload Images
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ matrix.image }}-${{ env.PLATFORM_PAIR }}
          path: ./docker-image
  update-trivy-db:
    name: Scanning "${{ matrix.image }}" on ${{ matrix.platform }} for vulnerabilities
    needs:
      - build
      - image-matrix
      - supported-platform-matrix
    runs-on: ${{ contains(matrix.platform, 'arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.supported-platform-matrix.outputs.platform) }}
    steps:
      - run: mkdir /tmp/trivy
      - name: Cache Trivy Cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: /tmp/trivy
          key: cache-trivy-${{ runner.environment }}-${{ runner.arch }}-${{ runner.os }}
          restore-keys: cache-trivy-
      - run: docker run -v /tmp/trivy:/var/lib/trivy -v /var/run/docker.sock:/var/run/docker.sock -t aquasec/trivy:latest --cache-dir /var/lib/trivy image --download-db-only
  scan-vulnerability:
    name: Scanning "${{ matrix.image }}" on ${{ matrix.platform }} for vulnerabilities
    needs:
      - build
      - image-matrix
      - supported-platform-matrix
      - update-trivy-db
    runs-on: ${{ contains(matrix.platform, 'arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.image-matrix.outputs.image) }}
        platform: ${{ fromJson(needs.supported-platform-matrix.outputs.platform) }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          printf "PLATFORM_ARCH=%s" $(echo "${{ matrix.platform }}" | cut -d "/" -f 2) >> $GITHUB_ENV
      - name: Runner Arch
        run: echo "${{ runner.arch }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        if: ${{ !contains(matrix.platform, 'arm') && !contains(matrix.platform, 'amd64') }}
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - name: Download Images
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: docker-image-${{ matrix.image }}-${{ env.PLATFORM_PAIR }}
          path: ./docker-image
      - run: ls -lasth ./docker-image/
      - run: mv ./docker-image/image-${{ matrix.image }}-${{ env.PLATFORM_PAIR }}.tags ./docker-image/image.tags
      - run: ls -lasth ./docker-image/
      - run: docker load --input ./docker-image/docker_image-${{ env.PLATFORM_PAIR }}.tar
      - run: docker pull aquasec/trivy:latest
      - run: mkdir /tmp/trivy
      - name: Cache Trivy Cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: /tmp/trivy
          key: cache-trivy-${{ runner.environment }}-${{ runner.arch }}-${{ runner.os }}
          restore-keys: cache-trivy-
      - run: make ci-scan-vulnerability
  test:
    name: Testing "${{ matrix.image }}" on ${{ matrix.platform }}
    needs:
      - build
      - image-matrix
      - supported-platform-matrix
    runs-on: ${{ contains(matrix.platform, 'arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.image-matrix.outputs.image) }}
        platform: ${{ fromJson(needs.supported-platform-matrix.outputs.platform) }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          printf "PLATFORM_ARCH=%s" $(echo "${{ matrix.platform }}" | cut -d "/" -f 2) >> $GITHUB_ENV
      - name: Runner Arch
        run: echo "${{ runner.arch }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
#        if: ${{ !contains(matrix.platform, 'arm') && !contains(matrix.platform, 'amd64') }}
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - name: Download Images
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: docker-image-${{ matrix.image }}-${{ env.PLATFORM_PAIR }}
          path: ./docker-image
      - run: ls -lasth ./docker-image/
      - run: mv ./docker-image/image-${{ matrix.image }}-${{ env.PLATFORM_PAIR }}.tags ./docker-image/image.tags
      - run: ls -lasth ./docker-image/
      - run: docker load --input ./docker-image/docker_image-${{ env.PLATFORM_PAIR }}.tar
      - run: |
          export IMAGE_BASE_VERSION=$(php -r 'echo explode("-", "${{ matrix.image }}")[2];')
          make $(php -r 'echo "test-", explode("-", str_replace(["zts-zts", "cli-nts"], ["zts", "nts"], "${{ matrix.image }}"))[0];') IMAGE_ARCH=$(echo "${PLATFORM_ARCH}")
      - run: rm -Rf ./docker-image/
  check-mark:
    name: ✔️
    needs:
      - lint
      - build
      - scan-vulnerability
      - test
    runs-on: ubuntu-latest
    steps:
      - run: echo "✔️"
  push:
    name: Pushing "${{ matrix.image }}"
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
    needs:
      - check-mark
      - image-matrix
      - supported-platform-matrix
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:3
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.image-matrix.outputs.image) }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: docker-image-${{ matrix.image }}-*
          path: /tmp/docker-image
          merge-multiple: true
      - run: ls -lasthR /tmp/docker-image/
      - run: cat /tmp/docker-image/image-*.tags > /tmp/docker-image/image.tags
      - run: ls -lasthR /tmp/docker-image/
      - run: |
          for f in /tmp/docker-image/docker_image-*.tar; do
            docker load --input $f
          done
      - run: docker images
      - run: |
          xargs -I % docker tag "%" "localhost:5000/%" < /tmp/docker-image/image.tags
          xargs -I % docker push "localhost:5000/%" < /tmp/docker-image/image.tags
      - run: docker images
      - name: Login to container registries
        uses: nick-invision/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          timeout_minutes: 120
          retry_wait_seconds: 30
          max_attempts: 5
          command: |
            (jq -r 'to_entries | map("echo \"$" + .value + "\" | docker login " + .key + " --username \"${{ env.DOCKER_USER }}\" --password-stdin") | .[]' <<<"$DOCKER_IMAGE_REGISTRIES_SECRET_MAPPING") | sh
        env:
          DOCKER_USER: ${{ secrets.HUB_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          HUB_PASSCODE: ${{ secrets.HUB_PASSCODE }}
      - name: Docker info
        run: docker info
      - name: Collect non-Arch suffixed tags
        run: |
          php utils/strip-arch-and-deduplicate.php ${{ env.DOCKER_IMAGE }} > /tmp/tags-to-push.list
          cat /tmp/tags-to-push.list
        env:
          ARCHS: ${{ join(fromJson(needs.supported-platform-matrix.outputs.platform), ',') }}
      - name: Create merge Dockerfiles
        run: |
          cat /tmp/tags-to-push.list | xargs -I % sh -c 'echo "FROM localhost:5000/${{ env.DOCKER_IMAGE }}:%-\${TARGETARCH}" >> docker-file-%'
          cat docker-file-*
          ls -lasth docker-file-*
      - name: Push all images to registries
        run: |
          (jq -r 'to_entries | map("cat /tmp/tags-to-push.list | xargs -I % docker buildx build -f docker-file-% -t " + .key + "/${{ env.DOCKER_IMAGE }}:% --platform=${{ join(fromJson(needs.supported-platform-matrix.outputs.platform), ',') }} --push  .") | .[]' <<<"$DOCKER_IMAGE_REGISTRIES_SECRET_MAPPING") | sh
