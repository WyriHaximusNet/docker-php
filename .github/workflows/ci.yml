name: Continuous Integration
env:
  DOCKER_IMAGE: wyrihaximusnet/php
  DOCKER_BUILDKIT: 1
on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron:  '33 7 * * *'
jobs:
  generate-alpine-strategy:
    name: Generate Alpine
    runs-on: ubuntu-latest
    container:
      image: wyrihaximusnet/php:7.4-nts-alpine3.12-root
    outputs:
      alpine: ${{ steps.generate-alpine-strategy.outputs.alpine }}
    steps:
      - uses: actions/checkout@v1
      - id: generate-alpine-strategy
        name: Generate Alpine
        run: |
          php utils/currently-supported-alpine-versions.php
  generate-php-strategy:
    name: Generate PHP
    runs-on: ubuntu-latest
    outputs:
      php: ${{ steps.generate-php-strategy.outputs.php }}
    steps:
      - uses: actions/checkout@v1
      - id: generate-php-strategy
        name: Generate PHP
        run: |
          php utils/currently-supported-php-versions.php
  generate-type-strategy:
    name: Generate Type
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.generate-type-strategy.outputs.type }}
    steps:
      - uses: actions/checkout@v1
      - id: generate-type-strategy
        name: Generate Type
        run: |
          if [ "${{ github.event_name }}" == "schedule" ] ; then
            echo "::set-output name=type::[\"zts\", \"nts\"]"
            exit 0
          fi
          echo "::set-output name=type::[\"zts\", \"nts\"]"
  lint:
    runs-on: ubuntu-latest
    needs:
      - generate-type-strategy
    strategy:
      fail-fast: false
      matrix:
        type: ${{ fromJson(needs.generate-type-strategy.outputs.type) }}
    steps:
      - uses: actions/checkout@v2
      - name: Lint ${{ matrix.type }}
        uses: docker://hadolint/hadolint:latest-debian
        with:
          entrypoint: hadolint
          args: Dockerfile-${{ matrix.type }}
  build:
    needs:
      - lint
      - generate-alpine-strategy
      - generate-php-strategy
      - generate-type-strategy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        alpine: ${{ fromJson(needs.generate-alpine-strategy.outputs.alpine) }}
        php: ${{ fromJson(needs.generate-php-strategy.outputs.php) }}
        type: ${{ fromJson(needs.generate-type-strategy.outputs.type) }}
    steps:
      - uses: actions/checkout@v2
      - run: mkdir ./docker-image/
      - run: ./build-php.sh zts zts ${{ matrix.php }} ${{ matrix.alpine }}
        if: matrix.type == 'zts'
      - run: ./build-php.sh cli nts ${{ matrix.php }} ${{ matrix.alpine }}
        if: matrix.type == 'nts'
      - run: cat ./docker-image/build-${{ matrix.type }}.tags | xargs -I % docker inspect --format='%={{.Id}}:{{index .Config.Env 7}}' %
      - run: docker save "${DOCKER_IMAGE}" -o ./docker-image/docker_image-${{ matrix.type }}.tar
      - run: docker images
      - uses: actions/upload-artifact@v2
        with:
          name: docker-image-${{ matrix.alpine }}-${{ matrix.php }}-${{ matrix.type }}
          path: ./docker-image
  scan-vulnerability:
    needs:
      - build
      - generate-alpine-strategy
      - generate-php-strategy
      - generate-type-strategy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        alpine: ${{ fromJson(needs.generate-alpine-strategy.outputs.alpine) }}
        php: ${{ fromJson(needs.generate-php-strategy.outputs.php) }}
        type: ${{ fromJson(needs.generate-type-strategy.outputs.type) }}
    steps:
      - uses: actions/checkout@v2
      - name: Install clair-scanner
        run: |
          sudo curl -L https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64 -o /usr/local/bin/clair-scanner
          sudo chmod +x /usr/local/bin/clair-scanner
      - uses: actions/download-artifact@v2
        with:
          name: docker-image-${{ matrix.alpine }}-${{ matrix.php }}-${{ matrix.type }}
          path: ./docker-image
      - run: docker load --input ./docker-image/docker_image-${{ matrix.type }}.tar
      - run: mkdir -p "./clair/${DOCKER_IMAGE}"
      - run: make ci-scan-vulnerability
  test:
    needs:
      - build
      - generate-alpine-strategy
      - generate-php-strategy
      - generate-type-strategy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        alpine: ${{ fromJson(needs.generate-alpine-strategy.outputs.alpine) }}
        php: ${{ fromJson(needs.generate-php-strategy.outputs.php) }}
        type: ${{ fromJson(needs.generate-type-strategy.outputs.type) }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: docker-image-${{ matrix.alpine }}-${{ matrix.php }}-${{ matrix.type }}
          path: ./docker-image
      - run: ls -lasth ./docker-image
      - run: docker load --input ./docker-image/docker_image-${{ matrix.type }}.tar
      - run: make test-${{ matrix.type }}
      - run: rm -Rf ./docker-image/
  push:
    needs:
      - scan-vulnerability
      - test
      - generate-alpine-strategy
      - generate-php-strategy
      - generate-type-strategy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        alpine: ${{ fromJson(needs.generate-alpine-strategy.outputs.alpine) }}
        php: ${{ fromJson(needs.generate-php-strategy.outputs.php) }}
        type: ${{ fromJson(needs.generate-type-strategy.outputs.type) }}
    steps:
      - uses: actions/checkout@v2
        if: (github.event_name == 'push' || github.event_name == 'schedule') && github.ref == 'refs/heads/master'
      - uses: actions/download-artifact@v2
        if: (github.event_name == 'push' || github.event_name == 'schedule') && github.ref == 'refs/heads/master'
        with:
          name: docker-image-${{ matrix.alpine }}-${{ matrix.php }}-${{ matrix.type }}
          path: ./docker-image
      - run: docker load --input ./docker-image/docker_image-${{ matrix.type }}.tar
        if: (github.event_name == 'push' || github.event_name == 'schedule') && github.ref == 'refs/heads/master'
      - run: make ci-push-${{ matrix.type }}
        if: (github.event_name == 'push' || github.event_name == 'schedule') && github.ref == 'refs/heads/master'
        env:
          DOCKER_USER: ${{ secrets.HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.HUB_PASSCODE }}
